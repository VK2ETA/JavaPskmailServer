/*
 * RMsgManageMessages.java
 *
 * Copyright (C) 2011 PÃ¤r Crusefalk (SM0RWO)
 * Copyright (C) 2018-2021 Pskmail Server, RadioMsg sections and other improvements John Douyere (VK2ETA) 
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * This is a contact manager that handles...well, contacts.
 * Its pretty simple but simplicity is also powerful :-)
 * 
 */
package javapskmail;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jdouyere
 */
public class RMsgManageMessages extends javax.swing.JFrame {
    
    private java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("javapskmail/Bundle");
    DefaultTableModel mRadioMSgTblModel;
    boolean showInbox = false;
    boolean showSent = false;
    boolean showBoth = true;
    
    
    
    /**
     * Creates new form RmsgManageMessages
     */
    public RMsgManageMessages() {
        initComponents();
        rbBoth.setSelected(true);
        loadRadioMsg();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgRmsgManageMsg = new javax.swing.ButtonGroup();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        bSelectAll = new javax.swing.JButton();
        bSelectPositions = new javax.swing.JButton();
        bSelectNone = new javax.swing.JButton();
        bInvertSelection = new javax.swing.JButton();
        rbInboxOnly = new javax.swing.JRadioButton();
        rbSentOnly = new javax.swing.JRadioButton();
        rbBoth = new javax.swing.JRadioButton();
        scrRadioMessages = new javax.swing.JScrollPane();
        tblRadioMsgs = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        bExport = new javax.swing.JButton();
        bDelete = new javax.swing.JButton();
        bArchive = new javax.swing.JButton();
        bClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jSplitPane2.setDividerLocation(200);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("RmsgManageMessages.select_border"))); // NOI18N

        bSelectAll.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        bSelectAll.setForeground(new java.awt.Color(0, 102, 51));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("javapskmail/Bundle"); // NOI18N
        bSelectAll.setText(bundle.getString("RmsgManageMessages.Button_Select_All")); // NOI18N
        bSelectAll.setMaximumSize(new java.awt.Dimension(110, 27));
        bSelectAll.setMinimumSize(new java.awt.Dimension(75, 27));
        bSelectAll.setPreferredSize(new java.awt.Dimension(100, 27));
        bSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSelectAllActionPerformed(evt);
            }
        });

        bSelectPositions.setText(bundle.getString("RmsgManageMessages.bSelectPositions")); // NOI18N
        bSelectPositions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSelectPositionsActionPerformed(evt);
            }
        });

        bSelectNone.setFont(new java.awt.Font("Ubuntu", 1, 12)); // NOI18N
        bSelectNone.setForeground(new java.awt.Color(0, 102, 51));
        bSelectNone.setText(bundle.getString("RmsgManageMessages.button_select_none_text")); // NOI18N
        bSelectNone.setMaximumSize(new java.awt.Dimension(110, 27));
        bSelectNone.setMinimumSize(new java.awt.Dimension(75, 27));
        bSelectNone.setPreferredSize(new java.awt.Dimension(100, 27));
        bSelectNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSelectNoneActionPerformed(evt);
            }
        });

        bInvertSelection.setText(bundle.getString("RmsgManageMessages.button_invert_selection_text")); // NOI18N
        bInvertSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bInvertSelectionActionPerformed(evt);
            }
        });

        bgRmsgManageMsg.add(rbInboxOnly);
        rbInboxOnly.setText(bundle.getString("RmsgManageMessages.RButton_Inbox_Text")); // NOI18N
        rbInboxOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbInboxOnlyActionPerformed(evt);
            }
        });

        bgRmsgManageMsg.add(rbSentOnly);
        rbSentOnly.setText(bundle.getString("RmsgManageMessages.RButton_Sent_Text")); // NOI18N
        rbSentOnly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSentOnlyActionPerformed(evt);
            }
        });

        bgRmsgManageMsg.add(rbBoth);
        rbBoth.setText(bundle.getString("RmsgManageMessages.RButton_Both_Text")); // NOI18N
        rbBoth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbBothActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bSelectPositions)
                    .addComponent(rbBoth)
                    .addComponent(rbSentOnly)
                    .addComponent(rbInboxOnly)
                    .addComponent(bInvertSelection)
                    .addComponent(bSelectNone, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bInvertSelection, bSelectAll, bSelectNone, bSelectPositions});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbInboxOnly)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbSentOnly)
                .addGap(4, 4, 4)
                .addComponent(rbBoth)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(bSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bSelectNone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bInvertSelection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bSelectPositions)
                .addGap(33, 33, 33))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {bSelectAll, bSelectPositions});

        jSplitPane2.setLeftComponent(jPanel1);

        scrRadioMessages.setPreferredSize(new java.awt.Dimension(1000, 500));

        tblRadioMsgs.setBackground(new java.awt.Color(255, 255, 230));
        tblRadioMsgs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRadioMsgs.setMaximumSize(new java.awt.Dimension(3000, 0));
        tblRadioMsgs.setMinimumSize(new java.awt.Dimension(0, 0));
        tblRadioMsgs.setSelectionBackground(new java.awt.Color(150, 150, 150));
        tblRadioMsgs.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tblRadioMsgs.setShowVerticalLines(false);
        tblRadioMsgs.getTableHeader().setReorderingAllowed(false);
        tblRadioMsgs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblRadioMsgsMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblRadioMsgsMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRadioMsgsMouseClicked(evt);
            }
        });
        scrRadioMessages.setViewportView(tblRadioMsgs);

        jSplitPane2.setRightComponent(scrRadioMessages);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("RmsgManageMessages.Action_Border"))); // NOI18N

        bExport.setText(bundle.getString("RmsgManageMessages.button_Export_Text")); // NOI18N
        bExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExportActionPerformed(evt);
            }
        });

        bDelete.setText(bundle.getString("RmsgManageMessages.button_Delete_Text")); // NOI18N
        bDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeleteActionPerformed(evt);
            }
        });

        bArchive.setText(bundle.getString("RmsgManageMessages.button_Archive_Text")); // NOI18N
        bArchive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bArchiveActionPerformed(evt);
            }
        });

        bClose.setText(bundle.getString("RmsgManageMessages.button_Close_Text")); // NOI18N
        bClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bExport)
                .addGap(18, 18, 18)
                .addComponent(bArchive)
                .addGap(18, 18, 18)
                .addComponent(bDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 315, Short.MAX_VALUE)
                .addComponent(bClose)
                .addGap(24, 24, 24))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bExport)
                    .addComponent(bDelete)
                    .addComponent(bArchive)
                    .addComponent(bClose))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(338, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(71, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSelectAllActionPerformed

        int lastRow = tblRadioMsgs.getRowCount() - 1;
        if (lastRow >= 0) {
            tblRadioMsgs.setRowSelectionInterval(0, lastRow);
        }
    }//GEN-LAST:event_bSelectAllActionPerformed

    private void tblRadioMsgsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRadioMsgsMousePressed
        // Where did this take place?
        JTable source = (JTable) evt.getSource();
        int nrow = source.rowAtPoint(evt.getPoint());
        int ncolumn = source.columnAtPoint(evt.getPoint());
        if (!source.isRowSelected(nrow)) {
            source.changeSelection(nrow, ncolumn, false, false);
        }
    }//GEN-LAST:event_tblRadioMsgsMousePressed

    private void tblRadioMsgsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRadioMsgsMouseReleased
        // TODO add your handling code here:
        //this.tblInboxMousePressed(evt);
    }//GEN-LAST:event_tblRadioMsgsMouseReleased

    private void tblRadioMsgsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRadioMsgsMouseClicked
        JTable source = (JTable) evt.getSource();
        int nrow = source.rowAtPoint(evt.getPoint());
        int ncolumn = source.columnAtPoint(evt.getPoint());
        int clickCount = evt.getClickCount();
        if (clickCount == 1 && source.getSelectedRow() != -1) {
            if (!source.isRowSelected(nrow)) {
                source.changeSelection(nrow, ncolumn, false, false);
            }
        }
        if (clickCount == 2 && source.getSelectedRow() != -1) {
            if (!source.isRowSelected(nrow)) {
                source.changeSelection(nrow, ncolumn, false, false);
            }
            RMsgDisplayItem myDisplayItem = (RMsgDisplayItem) source.getModel().getValueAt(nrow, ncolumn);
            RMsgMessageViewer myRMsgViewer = new RMsgMessageViewer(myDisplayItem);
            // Center screen
            myRMsgViewer.setLocationRelativeTo(null);
            myRMsgViewer.setVisible(true);
        }
    }//GEN-LAST:event_tblRadioMsgsMouseClicked

    private void bSelectNoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSelectNoneActionPerformed
        
        scrollRadioMsgsTableToLast();
    }//GEN-LAST:event_bSelectNoneActionPerformed

    private void rbInboxOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbInboxOnlyActionPerformed
        
        showInbox = true;
        showSent = false;
        showBoth = false;
        loadRadioMsg();
    }//GEN-LAST:event_rbInboxOnlyActionPerformed

    private void rbSentOnlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSentOnlyActionPerformed
        
        showInbox = false;
        showSent = true;
        showBoth = false;
        loadRadioMsg();
    }//GEN-LAST:event_rbSentOnlyActionPerformed

    private void rbBothActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbBothActionPerformed
        
        showInbox = false;
        showSent = false;
        showBoth = true;
        loadRadioMsg();        
    }//GEN-LAST:event_rbBothActionPerformed

    private void bInvertSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bInvertSelectionActionPerformed
        
        int lastRow = tblRadioMsgs.getRowCount() - 1;
        if (lastRow >= 0) {
            tblRadioMsgs.clearSelection();
            for (int i = 0; i < tblRadioMsgs.getRowCount(); i ++) {
                if (tblRadioMsgs.isRowSelected(i)) {
                    tblRadioMsgs.removeRowSelectionInterval(i, i);
                } else {
                    tblRadioMsgs.addRowSelectionInterval(i, i);
                }
            }
        }  
    }//GEN-LAST:event_bInvertSelectionActionPerformed

    private void bSelectPositionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSelectPositionsActionPerformed
        
        int lastRow = tblRadioMsgs.getRowCount() - 1;
        if (lastRow >= 0) {
            String value = "";
            RMsgDisplayItem mDisplayItem;
            tblRadioMsgs.clearSelection();
            for (int i = 0; i < tblRadioMsgs.getRowCount(); i ++) {
                mDisplayItem = (RMsgDisplayItem) tblRadioMsgs.getModel().getValueAt(i, 0);
                if (mDisplayItem.mMessage.msgHasPosition) {
                    tblRadioMsgs.addRowSelectionInterval(i, i);
                }
            }
        }  
        
    }//GEN-LAST:event_bSelectPositionsActionPerformed

    private void bCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCloseActionPerformed
        
        refreshAllMessageLists();
        this.setVisible(false);
    }//GEN-LAST:event_bCloseActionPerformed

    
    private void bExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExportActionPerformed
        //Export all locations to a GPX file
            Object[] options = {"Yes", "No"};
        int lastRow = tblRadioMsgs.getRowCount() - 1;
        if (lastRow >= 0 && tblRadioMsgs.getSelectedRowCount() > 0) {
            //Not an empty list or at least one selected item
            int n = JOptionPane.showOptionDialog(this, "Export the selected messages with GPS Locations?\n",
                    "Export Selected?",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[1]);
            if (n == 0) {
                RMsgDisplayItem mDisplayItem;
                int processed = 0;
                List<RMsgObject> msgList = new ArrayList<RMsgObject>();
                for (int i = 0; i < tblRadioMsgs.getRowCount(); i++) {
                    if (tblRadioMsgs.isRowSelected(i)) {
                        mDisplayItem = (RMsgDisplayItem) tblRadioMsgs.getModel().getValueAt(i, 0);
                        if (mDisplayItem.mMessage.msgHasPosition) {
                            msgList.add(mDisplayItem.mMessage);
                            processed++;
                        }
                    }
                }
                //Make GPX file
                if (processed > 0) {
                    Calendar c1 = Calendar.getInstance(TimeZone.getDefault());
                    String fileName = String.format(Locale.US, "%04d", c1.get(Calendar.YEAR)) + "-" +
                        String.format(Locale.US, "%02d", c1.get(Calendar.MONTH) + 1) + "-" +
                        String.format(Locale.US, "%02d", c1.get(Calendar.DAY_OF_MONTH)) + "_" +
                        String.format(Locale.US, "%02d%02d%02d", c1.get(Calendar.HOUR_OF_DAY),
                        c1.get(Calendar.MINUTE), c1.get(Calendar.SECOND)) + ".gpx";
                    GPXWriter.writeGpxFile(fileName, "RadioMsgTrack", msgList);
                    Main.q.Message("Exported " + processed + " record(s)", 5);
                }
            }
        }
    }//GEN-LAST:event_bExportActionPerformed

    
    private void bArchiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bArchiveActionPerformed
        //Archive All selected messages
        Object[] options = {"Yes", "No"};
        int lastRow = tblRadioMsgs.getRowCount() - 1;
        if (lastRow >= 0 && tblRadioMsgs.getSelectedRowCount() > 0) {
            //Not an empty list or at least one selected item
            int n = JOptionPane.showOptionDialog(this, "Archive the selected messages?\n",
                    "Archive Selected?",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[1]);
            if (n == 0) {
                RMsgDisplayItem mDisplayItem;
                int processed = 0;
                for (int i = 0; i < tblRadioMsgs.getRowCount(); i++) {
                    if (tblRadioMsgs.isRowSelected(i)) {
                        mDisplayItem = (RMsgDisplayItem) tblRadioMsgs.getModel().getValueAt(i, 0);
                        processed++;
                        String mFileName = mDisplayItem.mMessage.fileName;
                        String thisFolder = (mDisplayItem.myOwn ? Main.dirSent : Main.dirInbox);
                        RMsgUtil.copyAnyFile(thisFolder, mFileName, Main.dirArchive, false);
                        RMsgUtil.deleteFile(thisFolder, mFileName, false);
                        mFileName = mDisplayItem.mMessage.fileName.replaceAll(".txt", ".png");
                        RMsgUtil.copyAnyFile(Main.dirImages, mFileName, Main.dirArchive, false);
                        RMsgUtil.deleteFile(Main.dirImages, mFileName, false);
                        //tblRadioMsgs.remove(i);
                    }
                }
                Main.q.Message("Archived " + processed + " Message(s)", 5);
                //Completed, refresh list of messages
                refreshAllMessageLists();
            }
        }
    }//GEN-LAST:event_bArchiveActionPerformed

    private void bDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeleteActionPerformed
        //Delete All selected messages
        Object[] options = {"Yes", "No"};
        int lastRow = tblRadioMsgs.getRowCount() - 1;
        if (lastRow >= 0 && tblRadioMsgs.getSelectedRowCount() > 0) {
            //Not an empty list or at least one selected item
            int n = JOptionPane.showOptionDialog(this, "Delete the selected messages?\n",
                    "Delete Selected?",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[1]);
            if (n == 0) {
                RMsgDisplayItem mDisplayItem;
                int processed = 0;
                for (int i = 0; i < tblRadioMsgs.getRowCount(); i++) {
                    if (tblRadioMsgs.isRowSelected(i)) {
                        mDisplayItem = (RMsgDisplayItem) tblRadioMsgs.getModel().getValueAt(i, 0);
                        processed++;
                        String mFileName = mDisplayItem.mMessage.fileName;
                        String thisFolder = (mDisplayItem.myOwn ? Main.dirSent : Main.dirInbox);
                        //RMsgUtil.copyAnyFile(thisFolder, mFileName, Main.dirArchive, false);
                        RMsgUtil.deleteFile(thisFolder, mFileName, false);
                        mFileName = mDisplayItem.mMessage.fileName.replaceAll(".txt", ".png");
                        //RMsgUtil.copyAnyFile(Main.dirImages, mFileName, Main.dirArchive, false);
                        RMsgUtil.deleteFile(Main.dirImages, mFileName, false);
                        //tblRadioMsgs.remove(i);
                    }
                }
                Main.q.Message("Deleted " + processed + " Message(s)", 5);
                //Completed, refresh list of messages
                refreshAllMessageLists();
            }
        }
    }//GEN-LAST:event_bDeleteActionPerformed

    
    private void refreshAllMessageLists() {
        Main.mainui.buildDisplayList();
        Main.mainui.loadRadioMsg();
        this.loadRadioMsg();
    }

    
    //Load the GUI table in the table with the list of messages
    public void loadRadioMsg() {
        int listSize = Main.mainui.msgDisplayList.getLength();
        mRadioMSgTblModel = new RMsgTableModel();
        tblRadioMsgs.setModel(mRadioMSgTblModel);
        mRadioMSgTblModel.addColumn("Message");
        tblRadioMsgs.getColumnModel().getColumn(0).setCellRenderer(new RMsgTableRenderer());
        //TableColumn mycol = tblRadioMsgs.getColumnModel().getColumn(0);
        RMsgDisplayItem mDisplayItem;
        //String mMessageStr;
        for (int i = 0; i < listSize; i++) {
            mDisplayItem = Main.mainui.msgDisplayList.getItem(i);
            if ((showInbox && mDisplayItem.myOwn == false) 
                    || (showSent && mDisplayItem.myOwn == true)
                    || showBoth)
            mRadioMSgTblModel.addRow(new Object[]{mDisplayItem});
        }
        //Scroll to bottom of message list
        scrollRadioMsgsTableToLast();
    }
   
            
    //Scroll the displayed list of Radio Messages to the last one (received or sent)
    public void scrollRadioMsgsTableToLast() {
        int lastIndex = tblRadioMsgs.getRowCount() - 1;
        tblRadioMsgs.changeSelection(lastIndex, 0, false, false);
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RMsgManageMessages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RMsgManageMessages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RMsgManageMessages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RMsgManageMessages.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RMsgManageMessages().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bArchive;
    private javax.swing.JButton bClose;
    private javax.swing.JButton bDelete;
    private javax.swing.JButton bExport;
    private javax.swing.JButton bInvertSelection;
    private javax.swing.JButton bSelectAll;
    private javax.swing.JButton bSelectNone;
    private javax.swing.JButton bSelectPositions;
    private javax.swing.ButtonGroup bgRmsgManageMsg;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JRadioButton rbBoth;
    private javax.swing.JRadioButton rbInboxOnly;
    private javax.swing.JRadioButton rbSentOnly;
    private javax.swing.JScrollPane scrRadioMessages;
    private javax.swing.JTable tblRadioMsgs;
    // End of variables declaration//GEN-END:variables
}
