/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EmailAddressForm.java
 *
 * Created on 2011-dec-18, 15:45:20
 */

package javapskmail;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.swing.DefaultListModel;
import java.util.ArrayList;

/**
 *
 * @author per
 */
public class EmailAddressForm extends javax.swing.JDialog {
    private String contfilename;    // probably contacts.csv
    private File contfile;          // File handle for contacts.csv
    private contact contact;        // A contact object
    private ArrayList<contact> contactlist = new ArrayList<contact>(); // Used to hold all the contacts

    private String Tolist="";
    private String Copylist="";

    /** Creates new form EmailAddressForm */
    public EmailAddressForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        contfilename = Main.HomePath+Main.Dirprefix+"contacts.csv";
        FetchContacts();
        DisplayContacts();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pBottom = new javax.swing.JPanel();
        bClose = new javax.swing.JButton();
        pMain = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstContacts = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstTo = new javax.swing.JList();
        bAddTo = new javax.swing.JButton();
        bRemoveTo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstCopy = new javax.swing.JList();
        bAddCopy = new javax.swing.JButton();
        bRemoveCopy = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        pBottom.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("javapskmail/Bundle"); // NOI18N
        bClose.setText(bundle.getString("EmailAddressForm.bClose.text")); // NOI18N
        bClose.setMaximumSize(new java.awt.Dimension(191, 30));
        bClose.setMinimumSize(new java.awt.Dimension(75, 30));
        bClose.setPreferredSize(new java.awt.Dimension(80, 30));
        bClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCloseActionPerformed(evt);
            }
        });
        pBottom.add(bClose);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        getContentPane().add(pBottom, gridBagConstraints);

        pMain.setLayout(new java.awt.GridBagLayout());

        lstContacts.setModel(new DefaultListModel());
        lstContacts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstContactsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstContacts);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pMain.add(jScrollPane1, gridBagConstraints);

        lstTo.setModel(new DefaultListModel());
        lstTo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstToMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lstTo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pMain.add(jScrollPane2, gridBagConstraints);

        bAddTo.setText(bundle.getString("EmailAddressForm.bAddTo.text")); // NOI18N
        bAddTo.setMinimumSize(new java.awt.Dimension(70, 30));
        bAddTo.setPreferredSize(new java.awt.Dimension(67, 30));
        bAddTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddToActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 6, 0, 0);
        pMain.add(bAddTo, gridBagConstraints);

        bRemoveTo.setText(bundle.getString("EmailAddressForm.bRemoveTo.text")); // NOI18N
        bRemoveTo.setMinimumSize(new java.awt.Dimension(70, 30));
        bRemoveTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRemoveToActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        pMain.add(bRemoveTo, gridBagConstraints);

        jLabel1.setText(bundle.getString("EmailAddressForm.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(36, 12, 0, 0);
        pMain.add(jLabel1, gridBagConstraints);

        lstCopy.setModel(new DefaultListModel());
        lstCopy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstCopyMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(lstCopy);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pMain.add(jScrollPane3, gridBagConstraints);

        bAddCopy.setText(bundle.getString("EmailAddressForm.bAddCopy.text")); // NOI18N
        bAddCopy.setMinimumSize(new java.awt.Dimension(70, 30));
        bAddCopy.setPreferredSize(new java.awt.Dimension(67, 30));
        bAddCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddCopyActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 6, 0, 0);
        pMain.add(bAddCopy, gridBagConstraints);

        bRemoveCopy.setText(bundle.getString("EmailAddressForm.bRemoveCopy.text")); // NOI18N
        bRemoveCopy.setMinimumSize(new java.awt.Dimension(70, 30));
        bRemoveCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRemoveCopyActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        pMain.add(bRemoveCopy, gridBagConstraints);

        jLabel2.setText(bundle.getString("EmailAddressForm.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(24, 12, 0, 0);
        pMain.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(pMain, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public String getCopylist() {
        return Copylist;
    }

    public void setCopylist(String Copylist) {
        this.Copylist = Copylist;
    }

    public String getTolist() {
        return Tolist;
    }

    public void setTolist(String Tolist) {
        this.Tolist = Tolist;
    }

    /**
     * Save all the user set data
     */
    private void SaveData(){
        contact mycontact;
        // Get number of items in the list
        int tosize = this.lstTo.getModel().getSize();
        int copysize = this.lstCopy.getModel().getSize();

        // Get all to item objects
        for (int i=0; i<tosize; i++) {
            Object item = lstTo.getModel().getElementAt(i);
            mycontact = (contact) item;
            Tolist += "\""+mycontact.getFirstName()+" "+mycontact.getLastName()+"\" <"+mycontact.getEmail()+">"+", ";
        }

        // Get all com item objects
        for (int i=0; i<copysize; i++) {
            Object item = lstCopy.getModel().getElementAt(i);
            mycontact = (contact) item;
            Copylist += "\""+mycontact.getFirstName()+" "+mycontact.getLastName()+"\" <"+mycontact.getEmail()+">"+", ";
        }
        
    }

    /**
     * Update the email as selected
     * @param evt
     */
    private void bCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCloseActionPerformed

        SaveData();
        this.setVisible(false);
    }//GEN-LAST:event_bCloseActionPerformed

    private void bAddToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddToActionPerformed
        AddToAddressee();
    }//GEN-LAST:event_bAddToActionPerformed

    private void bRemoveToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRemoveToActionPerformed
        RemoveToAddressee();
    }//GEN-LAST:event_bRemoveToActionPerformed

    private void bRemoveCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRemoveCopyActionPerformed
       RemoveCopyAddressee();
    }//GEN-LAST:event_bRemoveCopyActionPerformed

    private void bAddCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddCopyActionPerformed
       AddCopyAddressee();
    }//GEN-LAST:event_bAddCopyActionPerformed

    /**
     * Copy adressee to the To list if its a double click
     * @param evt 
     */
    private void lstContactsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstContactsMouseClicked
        // Only act on double click
        if (evt.getClickCount() == 2) {
            AddToAddressee();
        }
    }//GEN-LAST:event_lstContactsMouseClicked

    // Remove addressee if double clicked
    private void lstToMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstToMouseClicked
        if (evt.getClickCount() == 2) {
            RemoveToAddressee();
        }
    }//GEN-LAST:event_lstToMouseClicked

    /**
     * Remove addressee if double clicked
     * @param evt 
     */
    private void lstCopyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstCopyMouseClicked
        if (evt.getClickCount() == 2) {
            RemoveCopyAddressee();
        }
    }//GEN-LAST:event_lstCopyMouseClicked

    /**
     * Add selected object to the tolist, remove it from the contact list
     */
    private void AddToAddressee(){
        // Check if there is a selected row
        Integer row;
        contact mycontact;
        DefaultListModel myListModel;
        DefaultListModel myContactListModel;

        try {
            // Is there a selected row in the list?
            row = this.lstContacts.getSelectedIndex();
            if (row > -1) {
                mycontact = (contact) this.lstContacts.getSelectedValue();
                myListModel = (DefaultListModel) this.lstTo.getModel();
                myContactListModel = (DefaultListModel) this.lstContacts.getModel();
                myContactListModel.remove(row);
                myListModel.addElement(mycontact);
            }
        } catch (Exception e) {
            Main.log.writelog("Error adding contacts to TO-field. "+e.getMessage(), e, true);
        }
    }

    /**
     * Add addressee to the copy field
     */
    private void AddCopyAddressee(){
            // Check if there is a selected row
        Integer row;
        contact mycontact;
        DefaultListModel myToModel;
        DefaultListModel myFromModel;

        try {
            // Is there a selected row in the list?
            row = this.lstContacts.getSelectedIndex();
            if (row > -1) {
                mycontact = (contact) this.lstContacts.getSelectedValue();
                myToModel = (DefaultListModel) this.lstCopy.getModel();
                myFromModel = (DefaultListModel) this.lstContacts.getModel();
                myFromModel.remove(row);
                myToModel.addElement(mycontact);
            }
        } catch (Exception e) {
            Main.log.writelog("Error adding contacts to Copy-field. "+e.getMessage(), e, true);
        }
    }
    
    /**
     * Remove selected adressee in the TO list
     */
    private void RemoveToAddressee(){
        // Check if there is a selected row
        Integer row;
        contact mycontact;
        DefaultListModel myToModel;
        DefaultListModel myFromModel;

        try {
            // Is there a selected row in the list?
            row = this.lstTo.getSelectedIndex();
            if (row > -1) {
                mycontact = (contact) this.lstTo.getSelectedValue();
                myFromModel = (DefaultListModel) this.lstTo.getModel();
                myToModel = (DefaultListModel) this.lstContacts.getModel();
                myFromModel.remove(row);
                myToModel.addElement(mycontact);
            }
        } catch (Exception e) {
            Main.log.writelog("Error removing contacts from TO-field. "+e.getMessage(), e, true);
        }    
    }

    /**
     * Remove adressee from the copy list
     */
    private void RemoveCopyAddressee(){
            // Check if there is a selected row
        Integer row;
        contact mycontact;
        DefaultListModel myToModel;
        DefaultListModel myFromModel;

        try {
            // Is there a selected row in the list?
            row = this.lstCopy.getSelectedIndex();
            if (row > -1) {
                mycontact = (contact) this.lstCopy.getSelectedValue();
                myFromModel = (DefaultListModel) this.lstCopy.getModel();
                myToModel = (DefaultListModel) this.lstContacts.getModel();
                myFromModel.remove(row);
                myToModel.addElement(mycontact);
            }
        } catch (Exception e) {
            Main.log.writelog("Error removing contacts from Copy-field. "+e.getMessage(), e, true);
        }    
    }
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EmailAddressForm dialog = new EmailAddressForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    /**
     * Try to read all the contacts in the file
     */
    private void FetchContacts(){
        try{
            String linestring;  // Used to hold lines of the files
            contfile = new File(contfilename);

            // First check most common problems
            if (contfile == null) {
                throw new IllegalArgumentException("File should not be null.");
            }
            if (!contfile.exists()) {
                // File did not exist, create it
                contfile.createNewFile();
            }
            if (!contfile.isFile()) {
                throw new IllegalArgumentException("Should not be a directory: " + contfile);
            }

            // We should have a file now, lets fetch stuff
            FileReader fin = new FileReader(contfilename);
            BufferedReader br = new BufferedReader(fin);

            while((linestring = br.readLine()) != null) {
                // Create another contact object and feed it the csv string
                contact = new contact();
                contact.LoadCSV(linestring);
                contactlist.add(contact);
            }
            fin.close();
        }
        catch(Exception e) {
            Main.log.writelog("Could not fetch contact information.", true);
        }
    }

        /**
     * Show the contacts
     */
    private void DisplayContacts(){
        try {
            contact mycontact;
            DefaultListModel myListModel;
            myListModel = (DefaultListModel) this.lstContacts.getModel();
            myListModel.clear();

            for (int i = 0; i < contactlist.size(); i++) {
                mycontact = contactlist.get(i);
                // Initialize the list with items
                myListModel.add(i, mycontact);
            }
        } catch (Exception e) {
            Main.log.writelog("Could not display contact information.", true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAddCopy;
    private javax.swing.JButton bAddTo;
    private javax.swing.JButton bClose;
    private javax.swing.JButton bRemoveCopy;
    private javax.swing.JButton bRemoveTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList lstContacts;
    private javax.swing.JList lstCopy;
    private javax.swing.JList lstTo;
    private javax.swing.JPanel pBottom;
    private javax.swing.JPanel pMain;
    // End of variables declaration//GEN-END:variables

}
