/*
 * NewMailDialog.java
 *
 * Copyright (C) 2010 PÃ¤r Crusefalk (SM0RWO)
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package javapskmail;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
/**
 *
 * @author  rein
 */
public class NewMailDialog extends javax.swing.JFrame {
    
    public String myattachment = "";
    private boolean Localmail = false;
    
    /** Creates new form NewMailDialog */
    public NewMailDialog() {
        initComponents();
        if (Localmail){
            NewToField.setText("@" + Main.myserver);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlEmailButtons = new javax.swing.JPanel();
        bOK = new javax.swing.JButton();
        add_attachment = new javax.swing.JButton();
        pnlEmail = new javax.swing.JPanel();
        lblSubject = new javax.swing.JLabel();
        NewToField = new javax.swing.JTextField();
        NewSubjectField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        NewTxtArea = new javax.swing.JTextArea();
        bTo = new javax.swing.JButton();
        bCopy = new javax.swing.JButton();
        NewCopyField = new javax.swing.JTextField();
        pnlButtons = new javax.swing.JPanel();
        lblAttachment = new javax.swing.JLabel();
        txtAttachment = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        mnuAddAttachment = new javax.swing.JMenuItem();
        mnuRemoveAttachment = new javax.swing.JMenuItem();
        mnuPrint = new javax.swing.JMenuItem();
        mnuClose = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        Menu_copy = new javax.swing.JMenuItem();
        Menu_Paste = new javax.swing.JMenuItem();
        Menu_cut = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(535, 430));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        pnlEmailButtons.setMaximumSize(new java.awt.Dimension(30000, 100));
        pnlEmailButtons.setMinimumSize(new java.awt.Dimension(390, 30));
        pnlEmailButtons.setPreferredSize(new java.awt.Dimension(390, 40));
        pnlEmailButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        bOK.setFont(new java.awt.Font("Ubuntu", 1, 12));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("javapskmail/Bundle"); // NOI18N
        bOK.setText(bundle.getString("NewMailDialog.bOK.text")); // NOI18N
        bOK.setMaximumSize(new java.awt.Dimension(80, 30));
        bOK.setMinimumSize(new java.awt.Dimension(80, 25));
        bOK.setPreferredSize(new java.awt.Dimension(80, 25));
        bOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOKActionPerformed(evt);
            }
        });
        pnlEmailButtons.add(bOK);

        add_attachment.setFont(new java.awt.Font("Ubuntu", 1, 12));
        add_attachment.setText(bundle.getString("NewMailDialog.add_attachment.text")); // NOI18N
        add_attachment.setMaximumSize(new java.awt.Dimension(105, 30));
        add_attachment.setMinimumSize(new java.awt.Dimension(105, 25));
        add_attachment.setPreferredSize(new java.awt.Dimension(105, 25));
        add_attachment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_attachmentActionPerformed(evt);
            }
        });
        pnlEmailButtons.add(add_attachment);

        getContentPane().add(pnlEmailButtons);

        pnlEmail.setMinimumSize(new java.awt.Dimension(390, 380));
        pnlEmail.setLayout(new java.awt.GridBagLayout());

        lblSubject.setText(bundle.getString("NewMailDialog.lblSubject.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlEmail.add(lblSubject, gridBagConstraints);

        NewToField.setMinimumSize(new java.awt.Dimension(200, 24));
        NewToField.setPreferredSize(new java.awt.Dimension(300, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlEmail.add(NewToField, gridBagConstraints);

        NewSubjectField.setMinimumSize(new java.awt.Dimension(200, 24));
        NewSubjectField.setPreferredSize(new java.awt.Dimension(300, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlEmail.add(NewSubjectField, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(200, 200));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 300));

        NewTxtArea.setColumns(20);
        NewTxtArea.setFont(new java.awt.Font("DejaVu Sans Mono", 0, 12));
        NewTxtArea.setLineWrap(true);
        NewTxtArea.setRows(5);
        NewTxtArea.setWrapStyleWord(true);
        NewTxtArea.setMinimumSize(new java.awt.Dimension(200, 200));
        NewTxtArea.setPreferredSize(new java.awt.Dimension(400, 300));
        jScrollPane1.setViewportView(NewTxtArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnlEmail.add(jScrollPane1, gridBagConstraints);

        bTo.setText(bundle.getString("NewMailDialog.bTo.text")); // NOI18N
        bTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bToActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        pnlEmail.add(bTo, gridBagConstraints);

        bCopy.setText(bundle.getString("NewMailDialog.bCopy.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        pnlEmail.add(bCopy, gridBagConstraints);

        NewCopyField.setText(bundle.getString("NewMailDialog.NewCopyField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        pnlEmail.add(NewCopyField, gridBagConstraints);

        getContentPane().add(pnlEmail);

        pnlButtons.setMaximumSize(new java.awt.Dimension(2147483647, 40));
        pnlButtons.setLayout(new java.awt.GridBagLayout());

        lblAttachment.setText(bundle.getString("NewMailDialog.lblAttachment.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        pnlButtons.add(lblAttachment, gridBagConstraints);

        txtAttachment.setMinimumSize(new java.awt.Dimension(100, 28));
        txtAttachment.setPreferredSize(new java.awt.Dimension(220, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        pnlButtons.add(txtAttachment, gridBagConstraints);

        getContentPane().add(pnlButtons);

        jMenu1.setText(bundle.getString("NewMailDialog.jMenu1.text")); // NOI18N

        jMenu3.setText(bundle.getString("NewMailDialog.jMenu3.text")); // NOI18N

        mnuAddAttachment.setText(bundle.getString("NewMailDialog.mnuAddAttachment.text")); // NOI18N
        mnuAddAttachment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddAttachmentActionPerformed(evt);
            }
        });
        jMenu3.add(mnuAddAttachment);

        mnuRemoveAttachment.setText(bundle.getString("NewMailDialog.mnuRemoveAttachment.text")); // NOI18N
        mnuRemoveAttachment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRemoveAttachmentActionPerformed(evt);
            }
        });
        jMenu3.add(mnuRemoveAttachment);

        jMenu1.add(jMenu3);

        mnuPrint.setText(bundle.getString("NewMailDialog.mnuPrint.text")); // NOI18N
        mnuPrint.setEnabled(false);
        jMenu1.add(mnuPrint);

        mnuClose.setText(bundle.getString("NewMailDialog.mnuClose.text")); // NOI18N
        mnuClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCloseActionPerformed(evt);
            }
        });
        jMenu1.add(mnuClose);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(bundle.getString("NewMailDialog.jMenu2.text")); // NOI18N

        Menu_copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        Menu_copy.setText(bundle.getString("NewMailDialog.Menu_copy.text")); // NOI18N
        Menu_copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Menu_copyActionPerformed(evt);
            }
        });
        jMenu2.add(Menu_copy);

        Menu_Paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        Menu_Paste.setText(bundle.getString("NewMailDialog.Menu_Paste.text")); // NOI18N
        Menu_Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Menu_PasteActionPerformed(evt);
            }
        });
        jMenu2.add(Menu_Paste);

        Menu_cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        Menu_cut.setText(bundle.getString("NewMailDialog.Menu_cut.text")); // NOI18N
        Menu_cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Menu_cutActionPerformed(evt);
            }
        });
        jMenu2.add(Menu_cut);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Setter for the To-field, use for reply, forward etc.
     * @param To
     */
    public void SetToField(String To){
        if (!To.isEmpty()){
            NewToField.setText(To);
        }
    }

    /**
     * Setter for subject field, use to create replies, forward etc.
     * @param subject
     */
    public void SetSubjectField(String subject){
        if(!subject.isEmpty()){
            this.NewSubjectField.setText(subject);
        }
    }

    /**
     * Use this to preset the message text, forwarded emails use this.
     * @param content
     */
    public void SetContentField(String content){
        if (!content.isEmpty()){
            this.NewTxtArea.setText(content);
        }
    }

/**
* Used to clean up addresses in the TO and Copy fields
* @param intext
* @return 
*/    
private String CleanToandCopyAddress(String intext){
    String myCleanAddress="";
    myCleanAddress = intext.replaceAll(";", ",");
    return myCleanAddress;
}    
   
/**
 * Transmit the email
 */
private void SendEmail(){
    String ToField = NewToField.getText();
    String CopyField = this.NewCopyField.getText();
    String filteredToField = "";
    String filteredCopyField="";
    String[] ToAddresses;
    String[] CopyAddresses;
    
    /* clean the addresses, relaxed cleaning now */
    filteredToField = CleanToandCopyAddress(ToField);
    filteredCopyField = this.CleanToandCopyAddress(CopyField);
    /* delimiter */
    String delimiter = ",";
    /* given string will be split by the argument delimiter provided. */
    ToAddresses = filteredToField.split(delimiter);
    CopyAddresses = filteredCopyField.split(delimiter);
    
    if (filteredToField.length() > 0) {
        FileWriter out = null;

        try {
            String NewMailText = "\n~SEND\n";
            if (!Main.configuration.getPreference("RETURNADDRESS").equals("")) {
                NewMailText += "From: " + Main.configuration.getPreference("RETURNADDRESS") + "\n";
            }
            NewMailText += "To: " + filteredToField + "\n";
            if (filteredCopyField.length() > 0){
                NewMailText += "Cc: "+ filteredCopyField + "\n";
            }
            NewMailText += "Subject: " + NewSubjectField.getText() + "\n";
            NewMailText += NewTxtArea.getText();
            String s = "";
            String att = "";

            if (myattachment.length() > 0) {
                att = Base64.encodeFromFile(myattachment);
                File ff = new File(myattachment);
                String name = ff.getName();

                if (att.length() > 0) {
                    NewMailText += "\nYour attachment: filename=" + Character.toString('"') + name + Character.toString('"') + "\n";
                    NewMailText += att + "\n";
                }
                myattachment = "";
            }
            NewMailText += ".\n.\n";

            File sent = new File(Main.HomePath + Main.Dirprefix + "Sentmail");
            out = new FileWriter(sent, true);
            out.write("\n" + Main.myTime());
            out.write(NewMailText);
            out.close();

            Random r = new Random();
            String token = Long.toString(Math.abs(r.nextLong()), 12);
            token = "tmp" + token;
            File outFile = new File(Main.HomePath + Main.Dirprefix + "Outbox" + Main.Separator + token);
            out = new FileWriter(outFile);
            out.write(NewMailText);
            out.close();
            this.setVisible(false);
            RefreshEmailgrids();

        } 
        catch (IOException ex) {
            Main.log.writelog("Email transmission failed.", ex, true);
        }
    }    
}


/**
 * Time to transmit email
 * @param evt 
 */    
private void bOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOKActionPerformed
    SendEmail();
    Main.mainui.refreshEmailGrid();
}//GEN-LAST:event_bOKActionPerformed

/**
 * This is the send email method used before the address book was added
 */
private void OldSendMail(){
    
    String CheckToField = NewToField.getText();
    String CopyField = this.NewCopyField.getText();
    String filteredToField = "";

  Pattern cTF = Pattern.compile("(<*)([A-Za-z0-9_.+-]+\\@[A-Za-z0-9_.-]+)(>*).*");

  /* String to split. */
  String[] temp;
  String mystr = "";
  String mystr2 = "";
  String mystr3 = "";
  mystr = CheckToField.replaceAll(",", "%");
  mystr2 = mystr.replaceAll("\\s", "%");
  mystr3 = mystr2.replaceAll("<", "%");
  
  /* delimiter */
  String delimiter = "%";
  /* given string will be split by the argument delimiter provided. */
  temp = mystr3.split(delimiter);

  /* print substrings */
  for(int i =0; i < temp.length ; i++) {
     Matcher am = cTF.matcher(temp[i]);
     if (am.lookingAt()){
         if (filteredToField.length() > 0) {
             filteredToField += ",";
         }
        filteredToField += am.group(2);
     }
  }
        if (filteredToField.length() > 0) {
            FileWriter out = null;

            try {
                String NewMailText = "\n~SEND\n";
                if (!Main.configuration.getPreference("RETURNADDRESS").equals("")) {
                    NewMailText += "From: " + Main.configuration.getPreference("RETURNADDRESS") + "\n";
                }
                NewMailText += "To: " + filteredToField + "\n";
                NewMailText += "Subject: " + NewSubjectField.getText() + "\n";
                NewMailText += NewTxtArea.getText();
                String s = "";
                String att = "";

                if (myattachment.length() > 0) {
                    att = Base64.encodeFromFile(myattachment);
                    File ff = new File(myattachment);
                    String name = ff.getName();

                        if (att.length() > 0) {
                            NewMailText += "\nYour attachment: filename=" + Character.toString('"') + name + Character.toString('"') + "\n";
                            NewMailText += att + "\n";
                        }
                         myattachment = "";
                }
    //     System.out.println(att);

                NewMailText += ".\n.\n";

                File sent = new File(Main.HomePath + Main.Dirprefix + "Sentmail");
                out = new FileWriter(sent, true);
                out.write("\n" + Main.myTime());
                out.write(NewMailText);
                out.close();

                Random r = new Random();
                String token = Long.toString(Math.abs(r.nextLong()), 12);
                token = "tmp" + token;
                File outFile = new File(Main.HomePath + Main.Dirprefix + "Outbox" + Main.Separator + token);
                out = new FileWriter(outFile);
                out.write(NewMailText);
                out.close();
                this.setVisible(false);
                RefreshEmailgrids();

            } catch (IOException ex) {
                Logger.getLogger(NewMailDialog.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
}

/**
 * Refresh the email grid on the parent
 */
private void RefreshEmailgrids(){
    mainpskmailui mu = (mainpskmailui) this.getParent();
    if (mu != null)
    {
        mu.refreshEmailGrid();
    }
}

private void add_attachmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_attachmentActionPerformed
    addattachment();
}//GEN-LAST:event_add_attachmentActionPerformed

/**
 * Select a file and add it as an attachment to the email
 */
private void addattachment(){
    try {
        // The file we will get
        File attach = new File(Main.HomePath);
 
        JFileChooser chooser = new JFileChooser(attach);
        int returnVal = chooser.showOpenDialog(chooser);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            myattachment = chooser.getSelectedFile().getPath();
            File sizer = new File(myattachment);
            this.txtAttachment.setText(myattachment.toString()+", size: "+Long.toString(sizer.length())+" bytes");
        }
        Main.q.Message("Including attachment ", 10);
    } catch (Exception ex) {
       Main.log.writelog("Could not add attachment.", ex,true);
    }
}



private void Menu_copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Menu_copyActionPerformed

    NewTxtArea.copy();
}//GEN-LAST:event_Menu_copyActionPerformed

private void Menu_PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Menu_PasteActionPerformed

    NewTxtArea.paste();
}//GEN-LAST:event_Menu_PasteActionPerformed

private void Menu_cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Menu_cutActionPerformed

    NewTxtArea.cut();
}//GEN-LAST:event_Menu_cutActionPerformed

private void mnuCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCloseActionPerformed

    this.setVisible(false);
}//GEN-LAST:event_mnuCloseActionPerformed

private void mnuAddAttachmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddAttachmentActionPerformed
    addattachment();
}//GEN-LAST:event_mnuAddAttachmentActionPerformed

private void mnuRemoveAttachmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRemoveAttachmentActionPerformed
    removeattachment();
}//GEN-LAST:event_mnuRemoveAttachmentActionPerformed

/**
 * Show the email address form
 * @param evt
 */
private void bToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bToActionPerformed
    String CheckAdr="";
    try {

        EmailAddressForm myAddress;
        // Show the editor, set and get our local contact object
        myAddress = new EmailAddressForm(this,true);
        myAddress.setLocationRelativeTo(null);
        myAddress.setVisible(true);
        // Get the values. Only copy if anything has been set and remove the last comma
        CheckAdr = myAddress.getTolist();
        if (CheckAdr.length()>0){
            NewToField.setText(CheckAdr.substring(0, CheckAdr.length()-2));
        }
        CheckAdr = myAddress.getCopylist();
        if (CheckAdr.length()>0){
            NewCopyField.setText(CheckAdr.substring(0, CheckAdr.length()-2));
        }
        
        myAddress.dispose();

    } catch (Exception e) {
        Main.log.writelog("Trouvle addressing email from contacts.", e,true);
    }
}//GEN-LAST:event_bToActionPerformed

/**
 * Remove the attachment
 */
private void removeattachment(){
    myattachment = "";
    this.txtAttachment.setText(myattachment.toString());
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
               java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewMailDialog().setVisible(true);
            }
        });

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Menu_Paste;
    private javax.swing.JMenuItem Menu_copy;
    private javax.swing.JMenuItem Menu_cut;
    private javax.swing.JTextField NewCopyField;
    private javax.swing.JTextField NewSubjectField;
    private javax.swing.JTextField NewToField;
    private javax.swing.JTextArea NewTxtArea;
    private javax.swing.JButton add_attachment;
    private javax.swing.JButton bCopy;
    private javax.swing.JButton bOK;
    private javax.swing.JButton bTo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAttachment;
    private javax.swing.JLabel lblSubject;
    private javax.swing.JMenuItem mnuAddAttachment;
    private javax.swing.JMenuItem mnuClose;
    private javax.swing.JMenuItem mnuPrint;
    private javax.swing.JMenuItem mnuRemoveAttachment;
    private javax.swing.JPanel pnlButtons;
    private javax.swing.JPanel pnlEmail;
    private javax.swing.JPanel pnlEmailButtons;
    private javax.swing.JTextField txtAttachment;
    // End of variables declaration//GEN-END:variables
    
}
